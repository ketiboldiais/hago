export enum TokenType {
  semicolon = `;`,
  left_brace = `{`,
  right_brace = `}`,
  left_parenthesis = `(`,
  right_parenthesis = `)`,
  left_bracket = `[`,
  right_bracket = `]`,
  tilde = `~`,
  comma = `,`,
  period = `.`,
  keyword_if = 'if',
  keyword_else = 'else',
  keyword_let = 'let',
  keyword_true = 'true',
  keyword_false = 'false',
  keyword_null = 'null',
  keyword_while = 'while',
  keyword_do = 'do',
  keyword_for = 'for',
  keyword_return = 'return',
  keyword_def = 'def',
  logic_operator_and = 'LOGICAL_AND',
  logic_operator_or = 'LOGICAL_OR',
  logic_operator_xor = 'LOGICAL_XOR',
  logic_operator_not = 'LOGICAL_NOT',
  relation_operator = 'RELATION_OPERATOR',
  equality_operator = 'EQUALITY_OPERATOR',
  literal_number = `DIGIT`,
  literal_string = `STRING`,
  identifier = `IDENTIFIER`,
  simple_assignment = `SIMPLE_ASSIGN`,
  complex_assignment = `COMPLEX_ASSIGN`,
  operator_add = `ADDITIVE_OPERATOR`,
  operator_multiply = `MULTIPLICATIVE_OPERATOR`,
  operator_power = `POWER_OPERATOR`,
}

export const LexemeTable = [
  [/^\s+/, null],
  [/^\/\/.*/, null],
  [/^\/\*[\s\S]*?\*\//, null],
  [/^;/, TokenType.semicolon],
  [/^\{/, TokenType.left_brace],
  [/^\}/, TokenType.right_brace],
  [/^\(/, TokenType.left_parenthesis],
  [/^\)/, TokenType.right_parenthesis],
  [/^,/, TokenType.comma],
  [/^\[/, TokenType.left_bracket],
  [/^\]/, TokenType.right_bracket],
  [/^\~/, TokenType.tilde],
  [/^\./, TokenType.period],
  [/^\blet\b/, TokenType.keyword_let],
  [/^\bif\b/, TokenType.keyword_if],
  [/^\belse\b/, TokenType.keyword_else],
  [/^\btrue\b/, TokenType.keyword_true],
  [/^\bfalse\b/, TokenType.keyword_false],
  [/^\bnull\b/, TokenType.keyword_null],
  [/^\bwhile\b/, TokenType.keyword_while],
  [/^\bdo\b/, TokenType.keyword_do],
  [/^\bfor\b/, TokenType.keyword_for],
  [/^\bdef\b/, TokenType.keyword_def],
  [/^\breturn\b/, TokenType.keyword_return],
  [/^\d+/, TokenType.literal_number],
  [/^[=!]=/, TokenType.equality_operator],
  [/^=/, TokenType.simple_assignment],
  [/^[\*\/\+\-]=/, TokenType.complex_assignment],
  [/^[+\-]/, TokenType.operator_add],
  [/^[*\/%]/, TokenType.operator_multiply],
  [/^[\^]/, TokenType.operator_power],
  [/^[><]=?/, TokenType.relation_operator],
  [/^\bxor\b/, TokenType.logic_operator_xor],
  [/^\band\b/, TokenType.logic_operator_and],
  [/^\bor\b/, TokenType.logic_operator_or],
  [/^\bnot\b/, TokenType.logic_operator_not],
  [/^\w+/, TokenType.identifier],
  [/^"[^"]*"/, TokenType.literal_string],
];
